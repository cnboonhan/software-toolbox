## Allows you to rename the current terminal title
set-title() {
    # If the length of string stored in variable `PS1_BAK` is zero...
    # - See `man test` to know that `-z` means "the length of STRING is zero"
    if [[ -z "$PS1_BAK" ]]; then
        # Back up your current Bash Prompt String 1 (`PS1`) into a global backup variable `PS1_BAK`
        PS1_BAK=$PS1
    fi

    # Set the title escape sequence string with this format: `\[\e]2;new title\a\]`
    # - See: https://wiki.archlinux.org/index.php/Bash/Prompt_customization#Customizing_the_terminal_window_title
    TITLE="\[\e]2;$@\a\]"
    # Now append the escaped title string to the end of your original `PS1` string (`PS1_BAK`), and set your
    # new `PS1` string to this new value
    PS1=${PS1_BAK}${TITLE}
}

## Helper function for PS1 modification to see git branch in terminal prompt
parse-git-branch() {
     git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

swp-purge() {
    echo 'purging swap files in current directory.'
    find . -type f -name "*.sw[klmnop]" -delete
}

reset-folder-permissions() {
    if [ $# -eq 0 ]
      then
        echo "Usage: reset-folder-permissions [folder]"
        exit 1
    fi

    sudo chown -R $USER $1
    chmod -R a-x,o-w,+X $1
}

wifi-scan() {

if [ $# -eq 0 ]
  then
    echo "Supply network interface to scan with!"
    return
fi

sudo iw dev $1 scan ap-force | grep -E 'SSID: [[:print:]]+'

}

git-pull-all() {
    find . -type d -name .git -exec sh -c "cd \"{}\"/../ && pwd && git pull" \;
}

fzgrep() {

  if [ -z "$1" ]; then
    echo "Usage: fzgrep [path-to-search]"
    echo "This will use FZF to search for a term within files in [path-to-search], and open to the selected line in vim"
    return
  fi

  out=$(grep -rnw . -e "$1" | fzf)
  if [[ -z "$out" ]]; then
    return

  else
    target_file=$(echo $out | cut -d':' -f1)
    target_line=$(echo $out | cut -d':' -f2)
    vim +$target_line $target_file
  fi

}
